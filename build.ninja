cxxflags = -O2 -flto -std=c++11 -Wall -DNDEBUG
#cxxflags = -g -std=c++11 -Wall

rule cc
  depfile = $out.d
  command = g++ -MMD -MF $out.d $cxxflags $includes -c $in -o $out

rule ar
  command = gcc-ar -r $out $in

rule ld
  command = g++ -flto -pthread -Lbuild -o $out $in $libs
#  command = g++ -pthread -Lbuild -o $out $in $libs

rule dep
  command = git clone $url $out

rule libspotify
  command = wget -qO- https://developer.spotify.com/download/libspotify/libspotify-12.1.51-Linux-x86_64-release.tar.gz | tar -xz -C lib/

###
# Download dependencies.

build lib/libspotify-12.1.51-Linux-x86_64-release: libspotify

build lib/json/nlohmann: dep
  url = https://github.com/nlohmann/json.git

build deps: phony lib/json/nlohmann/ lib/libspotify-12.1.51-Linux-x86_64-release


###
# libdripcore

build build/dripcore.d/loop.o: cc lib/dripcore/source/loop.cpp
  includes = -Ilib/dripcore/include

build build/dripcore.d/task.o: cc lib/dripcore/source/task.cpp
  includes = -Ilib/dripcore/include

build build/libdripcore.a: ar $
  build/dripcore.d/loop.o $
  build/dripcore.d/task.o


###
# libmsgpack

build build/msgpack.d/istream.o: cc lib/msgpack/source/istream.cpp
  includes = -Ilib/msgpack/include

build build/msgpack.d/ostream.o: cc lib/msgpack/source/ostream.cpp
  includes = -Ilib/msgpack/include

build build/libmsgpack.a: ar $
  build/msgpack.d/istream.o $
  build/msgpack.d/ostream.o

###
# libprogram-options

build build/program-options.d/argv_streambuf.o: cc lib/program-options/source/argv_streambuf.cpp
  includes = -Ilib/program-options/include

build build/program-options.d/container.o: cc lib/program-options/source/container.cpp
  includes = -Ilib/program-options/include

build build/program-options.d/exceptions.o: cc lib/program-options/source/exceptions.cpp
  includes = -Ilib/program-options/include

build build/program-options.d/option.o: cc lib/program-options/source/option.cpp
  includes = -Ilib/program-options/include

build build/libprogram-options.a: ar $
  build/program-options.d/argv_streambuf.o $
  build/program-options.d/container.o $
  build/program-options.d/exceptions.o $
  build/program-options.d/option.o


###
# libhttp

build build/http.d/base64.o: cc lib/http/source/base64.cpp
  includes = -Ilib/http/include

build build/http.d/common.o: cc lib/http/source/common.cpp
  includes = -Ilib/http/include

build build/http.d/request.o: cc lib/http/source/request.cpp
  includes = -Ilib/http/include

build build/http.d/response.o: cc lib/http/source/response.cpp
  includes = -Ilib/http/include

build build/http.d/websocket_handler_base.o: cc lib/http/source/handlers/websocket_handler_base.cpp
  includes = -Ilib/http/include

build build/libhttp.a: ar $
  build/http.d/base64.o $
  build/http.d/common.o $
  build/http.d/request.o $
  build/http.d/response.o $
  build/http.d/websocket_handler_base.o


###
# libmusciteer_dm

build build/musciteer_dm.d/kvstore.o: cc source/storage/kvstore.cpp
  includes = -Ilib/msgpack/include

build build/musciteer_dm.d/base62.o: cc source/storage/base62.cpp
  includes = -Ilib/msgpack/include

build build/musciteer_dm.d/artist.o: cc source/dm/artist.cpp
  includes = -Ilib/msgpack/include

build build/musciteer_dm.d/album.o: cc source/dm/album.cpp
  includes = -Ilib/msgpack/include

build build/musciteer_dm.d/track.o: cc source/dm/track.cpp
  includes = -Ilib/msgpack/include

build build/musciteer_dm.d/track_source.o: cc source/dm/track_source.cpp
  includes = -Ilib/msgpack/include

build build/musciteer_dm.d/album_cover.o: cc source/dm/album_cover.cpp
  includes = -Ilib/msgpack/include

build build/libmusciteer_dm.a: ar $
  build/musciteer_dm.d/kvstore.o $
  build/musciteer_dm.d/base62.o $
  build/musciteer_dm.d/artist.o $
  build/musciteer_dm.d/track.o $
  build/musciteer_dm.d/track_source.o $
  build/musciteer_dm.d/album.o $
  build/musciteer_dm.d/album_cover.o


###
# main

build build/http_connection.o: cc source/http/http_connection.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include -Ilib/http/include -Ilib/json/include

build build/player/audio_output.o: cc source/player/audio_output.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include

build build/player/player.o: cc source/player/player.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include

build build/player/player_task.o: cc source/player/player_task.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include

build build/player/player_session.o: cc source/player/player_session.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include

build build/player/source_local_task.o: cc source/player/source_local_task.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include

build build/player/source_spotify_task.o: cc source/player/source_spotify_task.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include -Ilib/libspotify-12.1.51-Linux-x86_64-release/include

build build/player/source_spotify_app_key.o: cc source/player/source_spotify_app_key.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include -Ilib/libspotify-12.1.51-Linux-x86_64-release/include

build build/main.o: cc source/main.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include -Ilib/http/include -Ilib/json/include -Ilib/program-options/include

build build/player/sources.o: cc source/player/sources.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include

build build/spotify_web/api.o: cc source/spotify_web/api.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include -Ilib/http/include -Ilib/json/include

build build/musciteer: ld $
  build/http_connection.o $
  build/player/audio_output.o $
  build/player/player.o $
  build/player/player_task.o $
  build/player/player_session.o $
  build/player/source_local_task.o $
  build/player/source_spotify_task.o $
  build/player/source_spotify_app_key.o $
  build/player/sources.o $
  build/spotify_web/api.o $
  build/main.o | build/libdripcore.a build/libmusciteer_dm.a build/libhttp.a build/libmsgpack.a build/libprogram-options.a
  libs = -Llib/libspotify-12.1.51-Linux-x86_64-release/lib -lprogram-options -ldripcore -lmusciteer_dm -lmsgpack -lhttp -lasound -lFLAC++ -lanl -lssl -lcrypto -lcrypto++ -lkyotocabinet -lspotify


###
# Tests

build build/test.d/main.o: cc test/main.cpp
  includes = -Ilib/http/include

build build/test.d/test_http_common.o: cc test/test_http_common.cpp
  includes = -Ilib/http/include

build build/test.d/test_http_request.o: cc test/test_http_request.cpp
  includes = -Ilib/http/include

build build/test.d/test_http_response.o: cc test/test_http_response.cpp
  includes = -Ilib/http/include

build build/test.d/test_magpack.o: cc test/test_msgpack.cpp
  includes = -Ilib/msgpack/include

build build/test.d/test_replay_gain_value.o: cc test/test_replay_gain_value.cpp
  includes = -Ilib/msgpack/include

build build/test.d/test_storage.o: cc test/test_storage.cpp
  includes = -Ilib/msgpack/include

build build/test.d/test_player_ctpb_provider.o: cc test/test_player_ctpb_provider.cpp
  includes = -Ilib/dripcore/include -Ilib/msgpack/include

build build/test: ld $
  build/test.d/test_http_common.o $
  build/test.d/test_http_request.o $
  build/test.d/test_http_response.o $
  build/test.d/test_magpack.o $
  build/test.d/test_replay_gain_value.o $
  build/test.d/test_storage.o $
  build/test.d/test_player_ctpb_provider.o $
  build/test.d/main.o | build/libhttp.a build/libmsgpack.a build/libmusciteer_dm.a
  libs = -ldripcore -lmsgpack -lhttp -lmusciteer_dm -lkyotocabinet -lanl -lssl -lcrypto


###
# flac_import

build build/tools.d/flac_import.o: cc source/tools/flac_import.cpp
  includes = -Ilib/msgpack/include

build build/flac_import: ld build/tools.d/flac_import.o | build/libmusciteer_dm.a build/libmsgpack.a
  libs = -lmusciteer_dm -lFLAC++ -lmsgpack -lkyotocabinet

###
# flac_rg_tagger

build build/tools.d/flac_rg_tagger.o: cc source/tools/flac_rg_tagger.cpp
  includes = -Ilib/msgpack/include

build build/flac_rg_tagger: ld build/tools.d/flac_rg_tagger.o | build/libmusciteer_dm.a build/libmsgpack.a
  libs = -lmusciteer_dm -lFLAC++ -lmsgpack -lkyotocabinet
